filter odd [1..10]
filter (>= 10) [1..20]
filter (> 10) [1..20]
filter (< 10) [1..20]
filter < 10 [1..20]
filter < [1..20]
:t filter
odd [1..10]
filter odd [1..10]
foldl (\a b -> a && even b) True [2,4,5,8] 
foldl (\a b -> a && odd b) True [2,4,5,8] 
foldl (\a b -> a && even b) True [2,4,5,8] 
:t foldr
:t foldl
foldl (\a b -> a && b) True [2,4,5,8] 
foldl (\a b -> a && b) True [2,4,5,8] 
foldl (\a b -> a && even b) True [2,4,5,8] 
foldr (\a b -> if a > b then a-b else a+b) 0 [4,3,2,1]
foldr (\a b -> if a > b then a-b else a+b) 0 [4,3,2,1
[sum[1..z] | z <- [1..10]]
[z | z <- [1..10]]
:i cler
clear
1 + 2 + 3 + 4 + 5
sum (take 5 [z | z <- [1..10]])
sum (take 5 [z | z <- [1..3]])
take 31 ([x |x  <- [1..20]])
take 21 ([x |x  <- [1..20]])
take 5 ([x |x  <- [1..20]])
take 5 ([x |x  <- [1,...,20]])
take 5 ([x |x  <- [1,...20]])
take 5 ([x |x  <- [1,..,20]])
take 5 ([x |x  <- [1,20]])
take 5 ([x | <- [1,20]])
take 5 (è[x | <- [1,20]])
take 5 [x | <- [1,20]]
take 5 [1,2,3,4,5,6,7]
clear
main
main
main()
main
main
concatena ["casa", "pari", "di", "un", "tre"] 
concatena ["casa", "pari", "di", "un", "tre"] 
concatena ["casa", "pari", "di", "un", "tre", "qua"] 
:r
––:r
:r
concatena ["casa", "pari", "di", "un", "tre", "qua"] 
concatena ["casa", "pari", "di", "un", "tre"] 
:r
:r
:r
inversioni1 [12, 3,43, 3]
inversioni1 [1,2,34,4]
inversioni1 [1,2,3,4]
:r
:r
:r
:r
:r
:r
:r
inversioni [1,2,3,4]
inversioni [12,3,4,5]
:r
inversioni [12,3,4,5]
:r
:r
ordinata [1,3,4,5]
ordinata [12,3,4,5]
ordinta [12,3,4,5]
:r
lunghezza [1,3,4,5]
:r
:e
notProd [1,2,3,0]
notProf [1,2,3,0]
notProf (1,2,3,0)
notProf (1,2,3,0=
:r
:r
:r
:r
:r
:r
:r
evenMed [1,2,3,4]
:r
:r
:r
:r
:r
:r
:r
:r
:r
:r
somma [1,2,3,4,5,6,7,8,9,10]
